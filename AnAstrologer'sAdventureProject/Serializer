import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.TreeMap;

public class Serializer {
    
    TreeMap<String, Object> objects_map;
    
    public Serializer() {
        objects_map = new TreeMap<>();
    }
    
    public String Serialize(Object myo, String id, boolean print) {
        return Do(myo, id, null, false, print);
    }
    
    public void Deserialize(Object myo, String id, String sin,
            boolean by_name, boolean print) {
        Do(myo, id, sin, by_name, print);
    }
    
    public void Clear() {
        objects_map.clear();
    }
    
    String Do(Object myo, String id, String sin,
            boolean by_name, boolean print) {
        String str = Wrap(myo.toString()) + Wrap(id);
        if (print) System.out.println("--------  " + str + "  " + (sin == null));
        ArrayList<String> asin = Split(sin);
        TreeMap<String, String> mapsin = new TreeMap<>();
        if (sin != null) {
            for (int k = 2; k < asin.size(); ++k) {
                ArrayList<String> si_s = Split(asin.get(k));
                mapsin.put(si_s.get(0), asin.get(k));
            }
        }
        Field[] fields = myo.getClass().getDeclaredFields();
        for (int k = 0; k < fields.length; ++k) {
            Field field = fields[k];
            field.setAccessible(true);
            String si = null;
            if ((sin != null) && !by_name) si = asin.get(k + 2);
            if ((sin != null) && by_name) si = mapsin.get(field.getName());
            ArrayList<String> si_s = Split(si);
            Class<?> type = field.getType();
            String ty = field.toGenericString();
            int m = ty.lastIndexOf(" ");
            ty = ty.substring(0, m);
            int m1 = ty.indexOf("<");
            if (m1 < 0) m1 = ty.length();
            m = ty.lastIndexOf(" ", m1 - 1);
            if (m >= 0) ty = ty.substring(m + 1);
            String st = Wrap(field.getName()) + Wrap(ty);
            try {
                if (!type.isArray()) {
                    st += Wrap(String.valueOf(field.get(myo)));
                    if ((si != null) && !si_s.get(2).equals("null")) {
                        String p = si_s.get(1);
                        String q = si_s.get(2).replace("[", "").replace("]", "").
                                replace("{", "").replace("}", "");
                        String[] qs = q.split(", ");
                        if (p.equals("double") || p.equals("java.lang.Double")) {
                            field.set(myo, Double.valueOf(q));
                        } else if (p.equals("int") || p.equals("java.lang.Integer")) {
                            field.set(myo, Integer.valueOf(q));
                        } else if (p.equals("boolean") || p.equals("java.lang.Boolean")) {
                            field.set(myo, Boolean.valueOf(q));
                        } else if (p.equals("java.lang.String")) {
                            field.set(myo, q);
                        } else if (p.equals("java.util.ArrayList<java.lang.Double>")) {
                            ArrayList<Double> vals = new ArrayList<>();
                            for (String val : qs) vals.add(Double.valueOf(val));
                            field.set(myo, vals);
                        } else if (p.equals("java.util.ArrayList<java.lang.Integer>")) {
                            ArrayList<Integer> vals = new ArrayList<>();
                            for (String val : qs) vals.add(Integer.valueOf(val));
                            field.set(myo, vals);
                        } else if (p.equals("java.util.ArrayList<java.lang.Boolean>")) {
                            ArrayList<Boolean> vals = new ArrayList<>();
                            for (String val : qs) vals.add(Boolean.valueOf(val));
                            field.set(myo, vals);
                        } else if (p.equals("java.util.ArrayList<java.lang.String>")) {
                            ArrayList<String> vals = new ArrayList<>();
                            for (String val : qs) vals.add(val);
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.Integer, java.lang.Double>")) {
                            TreeMap<Integer, Double> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(Integer.valueOf(ws[0]), Double.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.Integer, java.lang.Integer>")) {
                            TreeMap<Integer, Integer> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(Integer.valueOf(ws[0]), Integer.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.integer, java.lang.Boolean>")) {
                            TreeMap<Integer, Boolean> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(Integer.valueOf(ws[0]), Boolean.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.Integer, java.lang.String>")) {
                            TreeMap<Integer, String> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(Integer.valueOf(ws[0]), ws[1]);
                            }
                            field.set(myo, vals);
                        }  else if (p.equals("java.util.TreeMap<java.lang.String, java.lang.Double>")) {
                            TreeMap<String, Double> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(ws[0], Double.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.String, java.lang.Integer>")) {
                            TreeMap<String, Integer> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(ws[0], Integer.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.String, java.lang.Boolean>")) {
                            TreeMap<String, Boolean> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(ws[0], Boolean.valueOf(ws[1]));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.util.TreeMap<java.lang.String, java.lang.String>")) {
                            TreeMap<String, String> vals = new TreeMap<>();
                            for (String v : qs) {
                                String[] ws = CarefulSplit(v);
                                vals.put(ws[0], ws[1]);
                            }
                            field.set(myo, vals);
                        } else {
                            if (objects_map.containsKey(si_s.get(2))) {
                            field.set(myo, objects_map.get(si_s.get(2)));
                        }}
                    }
                } else {
                    if (si == null) {
                        int n = Array.getLength(field.get(myo));
                        for (int i = 0; i < n; ++i) {
                            st += Wrap(String.valueOf(Array.get(field.get(myo), i)));
                        }
                    } else {
                        String p = si_s.get(1);
                        int n = si_s.size() - 2;
                        if (p.equals("double[]")) {
                            double[] vals = new double[n];
                            for (int i = 0; i < n; ++i) {
                                vals[i] = Double.valueOf(si_s.get(i + 2));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.lang.Double[]")) {
                            Double[] vals = new Double[n];
                            for (int i = 0; i < n; ++i) {
                                if (!si_s.get(i + 2).equals("null")) {
                                    vals[i] = Double.valueOf(si_s.get(i + 2));
                                }
                            }
                            field.set(myo, vals);
                        } else if (p.equals("int[]")) {
                            int[] vals = new int[n];
                            for (int i = 0; i < n; ++i) {
                                vals[i] = Integer.valueOf(si_s.get(i + 2));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.lang.Integer[]")) {
                            Integer[] vals = new Integer[n];
                            for (int i = 0; i < n; ++i) {
                                if (!si_s.get(i + 2).equals("null")) {
                                    vals[i] = Integer.valueOf(si_s.get(i + 2));
                                }
                            }
                            field.set(myo, vals);
                        } else if (p.equals("boolean[]")) {
                            boolean[] vals = new boolean[n];
                            for (int i = 0; i < n; ++i) {
                                vals[i] = Boolean.valueOf(si_s.get(i + 2));
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.lang.Boolean[]")) {
                            Boolean[] vals = new Boolean[n];
                            for (int i = 0; i < n; ++i) {
                                if (!si_s.get(i + 2).equals("null")) {
                                    vals[i] = Boolean.valueOf(si_s.get(i + 2));
                                }
                            }
                            field.set(myo, vals);
                        } else if (p.equals("java.lang.String[]")) {
                            String[] vals = new String[n];
                            for (int i = 0; i < n; ++i) {
                                if (!si_s.get(i + 2).equals("null")) {
                                    vals[i] = si_s.get(i + 2);
                                }
                            }
                            field.set(myo, vals);
                        }
                    }
                }
            } catch (Exception ex) {}
            str += Wrap(st);
            if (print) {
                if (si != null) System.out.println(si);
                System.out.println(st);
            }
        }
        if (print) System.out.println();
        if (sin != null) objects_map.put(asin.get(0), myo);
        return str;
    }
    
    String[] CarefulSplit(String str) {
        String[] ws = str.split("=");
        if (ws.length == 0) return new String[]{"", ""};
        if (ws.length == 1) return new String[]{ws[0], ""};
        return ws;
    }
    
    public static String Wrap(String str) {
        return "(" + String.valueOf(str.length()) + "|" + str + ")";
    }
    
    public static ArrayList<String> Split(String sin) {
        if ((sin == null) || sin.equals("")) return null;
        ArrayList<String> strs = new ArrayList<>();
        int n = 0;
        while (n < sin.length()) {
            if (sin.charAt(n) != '(') {
                System.out.println("can not break " + sin);
                System.exit(1);
            }
            int k = sin.indexOf("|", n);
            if (k < 0) {
                System.out.println("can not break " + sin);
                System.exit(2);
            }
            int j = Integer.valueOf(sin.substring(n + 1, k));
            n = k + j + 2;
            if (n > sin.length()) {
                System.out.println("can not break " + sin);
                System.exit(3);
            }
            if (sin.charAt(n - 1) != ')') {
                System.out.println("can not break " + sin);
                System.exit(4);
            }
            strs.add(sin.substring(k + 1, n - 1));
        }
        return strs;
    }
    
}
